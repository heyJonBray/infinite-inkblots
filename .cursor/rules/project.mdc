---
description: 
globs: 
alwaysApply: true
---
# Infinite Inkblots - Project Guidelines

This document provides guidelines for working with the Infinite Inkblots JavaScript project, a generative art system that creates unique Rorschach-style inkblots from Ethereum addresses for NFTs.

## Project Overview

Infinite Inkblots creates unique, deterministic Rorschach-style inkblot patterns for NFTs, where each Ethereum address produces a consistent, reproducible image. The system uses a particle-based animation approach where thousands of small circles are placed according to a noise field to create organic, symmetrical patterns.

## Core Files and Responsibilities

- **eth_rorschach.js**: Main generator module
  - Contains the `EthereumRorschachGenerator` class
  - Handles all particle generation, noise fields, and ETH feature extraction
  - Manages image output and trait generation

- **examples.js**: Script to generate examples from different ETH addresses
  - Useful for testing and batch generation

## Key Components

### 1. Ethereum Feature Extraction

The `extractEthFeatures()` method analyzes Ethereum addresses to extract distinct properties:

- Character distribution (diversity, zeros, ones, letters)
- Value patterns (high/low, even/odd characters)
- Derived statistical properties

These features directly influence visual parameters in a deterministic way.

### 2. Noise Field Generation

The project uses a simplified Perlin noise implementation with:

- Seeded randomness based on ETH address
- Consistent patterns for the same address
- Particle position and color mapping

### 3. Particle Animation

The system builds images progressively by:

- Adding particles over multiple frames
- Applying subtle fade-out effects
- Maintaining perfect symmetry
- Using color mappings based on noise values

### 4. NFT Trait Extraction

The `extractTraits()` method derives NFT metadata including:

- Color scheme classification
- Particle density metrics
- Complexity measurement
- Size distribution traits

## Working with the Project

### Making Changes

When modifying the code, maintain these core principles:

1. **Determinism**: The same ETH address must always produce the same image
2. **Visual Quality**: Prioritize aesthetic quality over performance
3. **Parameter Mapping**: Keep clear connections between ETH features and visual parameters
4. **Efficient Animation**: Control the number of frames needed for good results

### Adding New Features

When extending the project:

1. **Color Schemes**: Add new schemes to the `getPlotter()` method
2. **Visual Effects**: Enhance the `drawFrame()` method for new particle effects
3. **ETH Feature Mapping**: Add new mappings in `customizeParamsFromAddress()`
4. **Trait Extraction**: Extend the `extractTraits()` method for new NFT attributes

### Parameter Guidelines

- **size**: Output image size (800-1200px recommended)
- **particleCount**: 1500-3000 for balanced density
- **runDuration**: 800-1200 frames for complete image formation 
- **scale**: 0.005-0.015 (smaller = more detailed patterns)
- **maxRadius**: 5-12 pixels for particle size

## Testing and Validation

Always verify these aspects when making changes:

1. **Address Consistency**: The same address should produce the same output across runs
2. **Visual Coverage**: Ensure sufficient particles to form cohesive patterns
3. **Performance**: Check that generation completes in a reasonable time
4. **Output Quality**: Verify images have proper contrast and detail

## NFT Integration Guidelines

### Metadata Format

Follow this JSON structure for NFT marketplaces:

```json
{
  "name": "Infinite Inkblot #123",
  "description": "A unique Rorschach-style inkblot generated from an Ethereum address",
  "image": "particle_ror_0x1234.png",
  "attributes": [
    {
      "trait_type": "Color Scheme",
      "value": "Blues"
    },
    {
      "trait_type": "Particle Density",
      "value": "Medium"
    }
  ]
}
```

### Image Storage

- Prefer IPFS for decentralized storage
- Include metadata hash in image generation process for verification
- Maintain high resolution (minimum 800x800px) for quality

## Extension Points

The most promising areas for extension are:

1. **Alternative Noise Algorithms**: Replace the Perlin noise with other algorithms
2. **Animation Export**: Generate animated versions (GIFs or MP4)
3. **Multi-Layer Generation**: Create separate layers for different particle types
4. **Interactive Viewing**: Add web interface for interactive exploration

## Command Line Interface

The generator accepts these CLI arguments:

- `--ethAddress`: Ethereum address for deterministic generation
- `--size`: Canvas size in pixels (default: 800)
- `--outputPath`: Path for saving the output image
- `--particleCount`: Number of particles per frame
- `--runDuration`: Number of frames to generate
- `--saveMetadata`: Flag to save NFT metadata